# Snakemake workflow for creating a matrix of windowed
# coverage values for genomic features and flanking regions 

# Usage ("--cores" should match the "THREADS" parameter in config.yaml, and reflect available threads):
# conda activate ChIPseq_mapping
# snakemake -p --cores 48
# conda deactivate

import os

# Specify config file parameters
configfile: "config.yaml"
sample    = config["SAMPLE"]
reference = config["MAPPING"]["reference"]
refbase   = os.path.basename(reference)
mode      = config["MAPPING"]["mode"]
flankName = config["COVERAGE"]["flankName"]
binName   = config["COVERAGE"]["binName"]

# Specify the desired end target file(s)
rule all:
    input:
        expand("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_genes_genomewide_matrix_bin{binName}_flank{flankName}.tab",
               sample = sample,
               refbase = refbase,
               mode = mode,
               binName = binName,
               flankName = flankName),
        expand("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.tab",
               sample = sample,
               refbase = refbase,
               mode = mode,
               binName = binName,
               flankName = flankName),
        expand("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_HTA7_genes_genomewide_matrix_bin{binName}_flank{flankName}.tab",
               sample = sample,
               refbase = refbase,
               mode = mode,
               binName = binName,
               flankName = flankName),
        expand("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_HTA7_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.tab",
               sample = sample,
               refbase = refbase,
               mode = mode,
               binName = binName,
               flankName = flankName),
        expand("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_hta7_upreg_genes_genomewide_matrix_bin{binName}_flank{flankName}.tab",
               sample = sample,
               refbase = refbase,
               mode = mode,
               binName = binName,
               flankName = flankName),
        expand("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_hta7_upreg_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.tab",
               sample = sample,
               refbase = refbase,
               mode = mode,
               binName = binName,
               flankName = flankName),

# Use computeMatrix function from deepTools to create a matrix of
# coverage values for genomic features and flanking regions, and
# for equivalent random loci and flanking regions
rule compute_matrix_genomeRegionFeatures:
    """Create matrices of coverage values for genomic features and random loci"""
    input:
        genesFile  = "/home/ajt200/analysis/HTA6_HTA7_leaf_Lorkovic_Berger_2017_CurrBiol/peaks/PeakRanger1.18/ranger/H2A_input_p0.05_q0.05/HTA7_ChIP_SRR5298546/TAIR10_chr_all_representative_genes_genomewide.bed",
        genes_ranLocFile = "/home/ajt200/analysis/HTA6_HTA7_leaf_Lorkovic_Berger_2017_CurrBiol/peaks/PeakRanger1.18/ranger/H2A_input_p0.05_q0.05/HTA7_ChIP_SRR5298546/TAIR10_chr_all_representative_genes_genomewide_randomLoci.bed",
        HTA7_genesFile         = "/home/ajt200/analysis/HTA6_HTA7_leaf_Lorkovic_Berger_2017_CurrBiol/peaks/PeakRanger1.18/ranger/H2A_input_p0.05_q0.05/HTA7_ChIP_SRR5298546/TAIR10_chr_all_representative_genes_overlapping_HTA7_peaks_genomewide.bed",
        HTA7_genes_ranLocFile        = "/home/ajt200/analysis/HTA6_HTA7_leaf_Lorkovic_Berger_2017_CurrBiol/peaks/PeakRanger1.18/ranger/H2A_input_p0.05_q0.05/HTA7_ChIP_SRR5298546/TAIR10_chr_all_representative_genes_overlapping_HTA7_peaks_genomewide_randomLoci.bed",
        hta7_upreg_genesFile        = "/home/ajt200/analysis/HTA6_HTA7_leaf_Lorkovic_Berger_2017_CurrBiol/peaks/PeakRanger1.18/ranger/H2A_input_p0.05_q0.05/HTA7_ChIP_SRR5298546/TAIR10_chr_all_representative_genes_upregulated_in_hta7_genomewide.bed",
        hta7_upreg_genes_ranLocFile       = "/home/ajt200/analysis/HTA6_HTA7_leaf_Lorkovic_Berger_2017_CurrBiol/peaks/PeakRanger1.18/ranger/H2A_input_p0.05_q0.05/HTA7_ChIP_SRR5298546/TAIR10_chr_all_representative_genes_upregulated_in_hta7_genomewide_randomLoci.bed",
        BW                    = "../{mode}/bw/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm.bw"
    output:
        genesGZ    = temp("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_genes_genomewide_matrix_bin{binName}_flank{flankName}.gz"),
        genesTAB   = "matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_genes_genomewide_matrix_bin{binName}_flank{flankName}.tab",
        genes_ranLocGZ   = temp("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.gz"),
        genes_ranLocTAB  = "matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.tab",
        HTA7_genesGZ           = temp("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_HTA7_genes_genomewide_matrix_bin{binName}_flank{flankName}.gz"),
        HTA7_genesTAB          = "matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_HTA7_genes_genomewide_matrix_bin{binName}_flank{flankName}.tab",
        HTA7_genes_ranLocGZ          = temp("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_HTA7_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.gz"),
        HTA7_genes_ranLocTAB         = "matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_HTA7_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.tab",
        hta7_upreg_genesGZ          = temp("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_hta7_upreg_genes_genomewide_matrix_bin{binName}_flank{flankName}.gz"),
        hta7_upreg_genesTAB         = "matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_hta7_upreg_genes_genomewide_matrix_bin{binName}_flank{flankName}.tab",
        hta7_upreg_genes_ranLocGZ         = temp("matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_hta7_upreg_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.gz"),
        hta7_upreg_genes_ranLocTAB        = "matrices/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_hta7_upreg_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.tab"
    params:
        regionBodyLength = config["COVERAGE"]["regionBodyLength"],
        startLabel       = config["COVERAGE"]["startLabel"],
        endLabel         = config["COVERAGE"]["endLabel"],
        upstream         = config["COVERAGE"]["upstream"],
        downstream       = config["COVERAGE"]["downstream"],
        binSize          = config["COVERAGE"]["binSize"],
        sortRegions      = config["COVERAGE"]["sortRegions"]
    log:
        genes      = "logs/computeMatrix/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_genes_genomewide_matrix_bin{binName}_flank{flankName}.log",
        genes_ranLoc     = "logs/computeMatrix/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.log",
        HTA7_genes             = "logs/computeMatrix/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_HTA7_genes_genomewide_matrix_bin{binName}_flank{flankName}.log",
        HTA7_genes_ranLoc            = "logs/computeMatrix/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_HTA7_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.log",
        hta7_upreg_genes            = "logs/computeMatrix/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_hta7_upreg_genes_genomewide_matrix_bin{binName}_flank{flankName}.log",
        hta7_upreg_genes_ranLoc           = "logs/computeMatrix/{sample}_MappedOn_{refbase}_lowXM_{mode}_sort_norm_hta7_upreg_genes_genomewide_ranLoc_matrix_bin{binName}_flank{flankName}.log"
    threads:
        config["THREADS"]
    shell:
        "(computeMatrix scale-regions"
        " --regionsFileName {input.genesFile}"
        " --scoreFileName {input.BW}"
        " --outFileName {output.genesGZ}"
        " --outFileNameMatrix {output.genesTAB}"
        " --regionBodyLength {params.regionBodyLength}"
        " --startLabel {params.startLabel}"
        " --endLabel {params.endLabel}"
        " --upstream {params.upstream}"
        " --downstream {params.downstream}"
        " --binSize {params.binSize}"
        " --sortRegions {params.sortRegions}"
        " --numberOfProcessors {threads}) 2> {log.genes}; "
        "(computeMatrix scale-regions"
        " --regionsFileName {input.genes_ranLocFile}"
        " --scoreFileName {input.BW}"
        " --outFileName {output.genes_ranLocGZ}"
        " --outFileNameMatrix {output.genes_ranLocTAB}"
        " --regionBodyLength {params.regionBodyLength}"
        " --startLabel {params.startLabel}"
        " --endLabel {params.endLabel}"
        " --upstream {params.upstream}"
        " --downstream {params.downstream}"
        " --binSize {params.binSize}"
        " --sortRegions {params.sortRegions}"
        " --numberOfProcessors {threads}) 2> {log.genes_ranLoc}; "
        "(computeMatrix scale-regions"
        " --regionsFileName {input.HTA7_genesFile}"
        " --scoreFileName {input.BW}"
        " --outFileName {output.HTA7_genesGZ}"
        " --outFileNameMatrix {output.HTA7_genesTAB}"
        " --regionBodyLength {params.regionBodyLength}"
        " --startLabel {params.startLabel}"
        " --endLabel {params.endLabel}"
        " --upstream {params.upstream}"
        " --downstream {params.downstream}"
        " --binSize {params.binSize}"
        " --sortRegions {params.sortRegions}"
        " --numberOfProcessors {threads}) 2> {log.HTA7_genes}; "
        "(computeMatrix scale-regions"
        " --regionsFileName {input.HTA7_genes_ranLocFile}"
        " --scoreFileName {input.BW}"
        " --outFileName {output.HTA7_genes_ranLocGZ}"
        " --outFileNameMatrix {output.HTA7_genes_ranLocTAB}"
        " --regionBodyLength {params.regionBodyLength}"
        " --startLabel {params.startLabel}"
        " --endLabel {params.endLabel}"
        " --upstream {params.upstream}"
        " --downstream {params.downstream}"
        " --binSize {params.binSize}"
        " --sortRegions {params.sortRegions}"
        " --numberOfProcessors {threads}) 2> {log.HTA7_genes_ranLoc}; "
        "(computeMatrix scale-regions"
        " --regionsFileName {input.hta7_upreg_genesFile}"
        " --scoreFileName {input.BW}"
        " --outFileName {output.hta7_upreg_genesGZ}"
        " --outFileNameMatrix {output.hta7_upreg_genesTAB}"
        " --regionBodyLength {params.regionBodyLength}"
        " --startLabel {params.startLabel}"
        " --endLabel {params.endLabel}"
        " --upstream {params.upstream}"
        " --downstream {params.downstream}"
        " --binSize {params.binSize}"
        " --sortRegions {params.sortRegions}"
        " --numberOfProcessors {threads}) 2> {log.hta7_upreg_genes}; "
        "(computeMatrix scale-regions"
        " --regionsFileName {input.hta7_upreg_genes_ranLocFile}"
        " --scoreFileName {input.BW}"
        " --outFileName {output.hta7_upreg_genes_ranLocGZ}"
        " --outFileNameMatrix {output.hta7_upreg_genes_ranLocTAB}"
        " --regionBodyLength {params.regionBodyLength}"
        " --startLabel {params.startLabel}"
        " --endLabel {params.endLabel}"
        " --upstream {params.upstream}"
        " --downstream {params.downstream}"
        " --binSize {params.binSize}"
        " --sortRegions {params.sortRegions}"
        " --numberOfProcessors {threads}) 2> {log.hta7_upreg_genes_ranLoc}"
